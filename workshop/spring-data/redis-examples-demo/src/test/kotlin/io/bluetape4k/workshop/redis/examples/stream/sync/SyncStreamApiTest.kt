package io.bluetape4k.workshop.redis.examples.stream.sync

import io.bluetape4k.logging.KLogging
import io.bluetape4k.logging.debug
import io.bluetape4k.workshop.redis.examples.stream.RedisStreamConfiguration
import io.bluetape4k.workshop.redis.examples.stream.SensorData
import org.amshove.kluent.shouldBeEqualTo
import org.amshove.kluent.shouldBeTrue
import org.amshove.kluent.shouldNotBeNull
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.data.redis.RedisSystemException
import org.springframework.data.redis.connection.stream.MapRecord
import org.springframework.data.redis.connection.stream.ReadOffset
import org.springframework.data.redis.connection.stream.RecordId
import org.springframework.data.redis.connection.stream.StreamOffset
import org.springframework.data.redis.core.StreamOperations
import org.springframework.data.redis.core.StringRedisTemplate
import org.springframework.data.redis.stream.StreamMessageListenerContainer
import kotlin.test.assertFailsWith

@SpringBootTest(classes = [RedisStreamConfiguration::class])
class SyncStreamApiTest @Autowired constructor(
    private val template: StringRedisTemplate,
    private val messageListenerContainer: StreamMessageListenerContainer<String, MapRecord<String, String, String>>,
) {

    companion object: KLogging()

    private val streamOps: StreamOperations<String, String, String> = template.opsForStream()

    @BeforeEach
    fun beforeEach() {
        template.requiredConnectionFactory.connection.serverCommands().flushAll()
    }

    @Test
    fun `send to stream by XADD, and read record from stream by XREAD`() {
        // Send to stream by XADD
        //
        val fixedId1 = streamOps.add(SensorData.RECORD_1234_0)!!
        log.debug { "fixedId1=$fixedId1" }
        fixedId1 shouldBeEqualTo SensorData.RECORD_1234_0.id

        val fixedId2 = streamOps.add(SensorData.RECORD_1234_1)!!
        log.debug { "fixedId2=$fixedId2" }
        fixedId2 shouldBeEqualTo SensorData.RECORD_1234_1.id

        // XLEN
        //
        streamOps.size(SensorData.KEY) shouldBeEqualTo 2L

        // 마지막 XADD 이후에 id 에 Timestamp 가 더 작은 값을 추가하려고 하면 예외가 발생한다.
        // 참고: RecordId 는 `epoch milliseconds-sequence id` 형식으로 구성됩니다.
        assertFailsWith<RedisSystemException> {
            val record = SensorData.create("1234", "19.8", "r2d2")
                .withId(RecordId.of("0-0"))  // fixedId1, fixedId2 의 RecordId 값보다 작은 timestamp 을 주면 예외가 발생합니다.

            streamOps.add(record)
        }

        // XADD with auto generated id
        val autoGeneratedId = streamOps.add(SensorData.create("1234", "19.8", ""))!!
        // 참고: RecordId 는 `epoch milliseconds-sequence id` 형식으로 구성됩니다. 해당 timestamp 에 첫번째 sequence 이므로
        autoGeneratedId.value.endsWith("-0").shouldBeTrue()
        // SensorData 의 StreamKey 에는 3개의 Record 가 존재합니다.
        streamOps.size(SensorData.KEY) shouldBeEqualTo 3L

        // XREAD from start of stream (Kafka의 earliest 전략과 같다)
        val fromStart =
            streamOps.read(StreamOffset.fromStart(SensorData.KEY))

        fromStart.shouldNotBeNull()
        fromStart.size shouldBeEqualTo 3
        fromStart.map { it.id } shouldBeEqualTo listOf(fixedId1, fixedId2, autoGeneratedId)

        // XREAD resume after fiexedId2 (Kafka의 latest 전략과 같다)
        val fromOffset =
            streamOps.read(StreamOffset.create(SensorData.KEY, ReadOffset.from(fixedId2)))

        fromOffset.shouldNotBeNull()
        fromOffset.size shouldBeEqualTo 1
        fromOffset.map { it.id } shouldBeEqualTo listOf(autoGeneratedId)
    }

    @Test
    fun `stream listener 를 통한 연속적 읽기`() {
        // MessageListenerContainer 의 Auto Start 는 기본적으로 disabled 입니다.
        if (!messageListenerContainer.isRunning) {
            messageListenerContainer.start()
        }

        val streamListener = CapturingStreamListener()

        // XREAD BLOCK - StreamListener 를 등록합니다.
        messageListenerContainer.receive(StreamOffset.fromStart(SensorData.KEY), streamListener)

        // Stream 에는 아무 것도 없으므로 기다려봐야 받은 record 는 없다.
        Thread.sleep(100)
        streamListener.receivedRecordCount shouldBeEqualTo 0

        // XADD - Stream 에 2개를 등록한다.
        streamOps.add(SensorData.RECORD_1234_0)
        streamOps.add(SensorData.RECORD_1234_1)

        // StreamListener 로 받은 SensorData 를 확인한다
        streamListener.take().id shouldBeEqualTo SensorData.RECORD_1234_0.id
        streamListener.take().id shouldBeEqualTo SensorData.RECORD_1234_1.id
        streamListener.receivedRecordCount shouldBeEqualTo 2

        streamOps.add(SensorData.RECORD_1235_0)

        streamListener.take().id shouldBeEqualTo SensorData.RECORD_1235_0.id
        streamListener.receivedRecordCount shouldBeEqualTo 3
    }
}
